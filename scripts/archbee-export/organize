#!/usr/bin/env ruby

require 'nokogiri'
require 'fileutils'
require 'yaml'
require 'pp'
require 'optparse'
# Set up an options hash to hold our command-line options
options = {}

# Set up the option parser
OptionParser.new do |opts|
  opts.banner = "Usage: rename.rb [options]"

  opts.on('-d', '--directory DIRECTORY', 'Directory to rename files in') do |dir|
    options[:directory] = dir
  end
  opts.on('-s', '--space SPACE', 'space ') do |dir|
    options[:space] = dir
  end
end.parse!

directory = options[:directory] || '.'
raise "--space flag required" unless options[:space]
space = options[:space]

# 1. Parse sitemap.xml to get all the URLs
sitemap = File.open("sitemap-#{space}.xml") { |f| Nokogiri::XML(f) }
urls = sitemap.xpath('//xmlns:loc').map(&:text)

# Create a map of paths to URLs for easy lookup
url_paths = urls.map { |url| [url.split('/').last, url] }.to_h
pp url_paths

def read_frontmatter(content)
  frontmatter_match = content.match(/---\n(.*?)---\n/m)
  "---\n#{frontmatter_match[1]}" if frontmatter_match
end

WEBSITE="https://docs.storj.io/#{space}/"
new_dir = "#{directory}_o"
FileUtils.mkdir_p(new_dir)
# 2. Parse the frontmatter from each markdown file to get the slug
Dir.glob("#{directory}/*.md").each do |markdown_file|
  puts "markdown_file #{markdown_file}"
  file = File.read(markdown_file)
  # Fix malformed markdown
  if file =~ /^title:(?!.*\").*?:.*/
    file = file.gsub(/^title: (.*)/) { |_| "title: \"#{$1}\"" }
    File.write(markdown_file, file)
    file = File.read(markdown_file)
  end
  frontmatter = YAML.load(file, permitted_classes: [Time])

  # If there's a slug in the frontmatter and it's in the URL list, move the file
  puts "frontmatter #{frontmatter['slug']} "
  puts "frontmatter #{File.basename frontmatter['slug'] || markdown_file} "
  puts "url_paths #{url_paths[frontmatter['slug']]}"
  slug = File.basename(frontmatter['slug'] || "") || markdown_file
  if frontmatter['slug'] && url_paths[slug]
    new_path = "#{new_dir}/" +  url_paths[slug].gsub(WEBSITE, '') + '.md'
    puts "new_path #{new_path}"
    FileUtils.mkdir_p("#{File.dirname(new_path)}")
    FileUtils.cp(markdown_file, new_path)
  # If the filename (without extension) is in the URL list, move the file
  elsif url_paths[File.basename(markdown_file, '.*')]
    new_path = "#{new_dir}/" + url_paths[File.basename(markdown_file, '.*')].gsub(WEBSITE, '') + '.md'
    puts "elsif new_path #{new_path}"
    FileUtils.mkdir_p(File.dirname(new_path))
    FileUtils.cp(markdown_file, new_path)
  end
end

